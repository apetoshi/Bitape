From 33194367ddf7c25a18da244cd6588dda8cce050e Mon Sep 17 00:00:00 2001
From: apetoshi <apetoshi@github.com>
Date: Thu, 17 Apr 2025 12:36:55 -0400
Subject: [PATCH] Update ResourcesPanel to fetch live blockchain data

---
 src/components/GameLayout.tsx     |   9 +--
 src/components/ResourcesPanel.tsx |  40 ++++++----
 src/hooks/useResourcesData.ts     | 125 ++++++++++++++++++++++++++++++
 3 files changed, 149 insertions(+), 25 deletions(-)
 create mode 100644 src/hooks/useResourcesData.ts

diff --git a/src/components/GameLayout.tsx b/src/components/GameLayout.tsx
index 652b2500..97cbaa1f 100644
--- a/src/components/GameLayout.tsx
+++ b/src/components/GameLayout.tsx
@@ -36,14 +36,7 @@ const GameLayout: React.FC = () => {
   const renderTabContent = () => {
     switch (activeTab) {
       case 'RESOURCES':
-        return (
-          <ResourcesPanel 
-            apeBalance={gameState.apeBalance}
-            bitBalance={gameState.bitBalance}
-            spacesLeft={gameState.spacesLeft}
-            gigawattsAvailable={gameState.gigawattsAvailable}
-          />
-        );
+        return <ResourcesPanel />;
       case 'SPACE':
         return (
           <div className="game-panel bg-[#001420] p-4 md:p-6 rounded-lg border-2 border-banana">
diff --git a/src/components/ResourcesPanel.tsx b/src/components/ResourcesPanel.tsx
index 792ccdea..11fe0ca8 100644
--- a/src/components/ResourcesPanel.tsx
+++ b/src/components/ResourcesPanel.tsx
@@ -1,18 +1,16 @@
-import React from 'react';
+'use client';
 
-interface ResourcesPanelProps {
-  apeBalance: string;
-  bitBalance: string;
-  spacesLeft: number | string;
-  gigawattsAvailable: number | string;
-}
+import React from 'react';
+import { useResourcesData } from '@/hooks/useResourcesData';
+import { useIsMounted } from '@/hooks/useIsMounted';
 
-export const ResourcesPanel: React.FC<ResourcesPanelProps> = ({
-  apeBalance,
-  bitBalance,
-  spacesLeft,
-  gigawattsAvailable
-}) => {
+export const ResourcesPanel: React.FC = () => {
+  const { apeBalance, bitBalance, spacesLeft, gigawattsAvailable, isLoading, hasFacility } = useResourcesData();
+  const isMounted = useIsMounted();
+  
+  // Only show data after mounting to prevent hydration mismatch
+  const showData = isMounted && !isLoading;
+  
   // Handle potential NaN values
   const displaySpaces = isNaN(Number(spacesLeft)) ? 0 : spacesLeft;
   const displayGigawatts = isNaN(Number(gigawattsAvailable)) ? 0 : gigawattsAvailable;
@@ -22,19 +20,27 @@ export const ResourcesPanel: React.FC<ResourcesPanelProps> = ({
       <div className="space-y-3">
         <div className="flex justify-between items-center py-1 border-b border-white/20">
           <span className="pixel-text text-white/80 text-xs md:text-sm">APE BALANCE</span>
-          <span className="pixel-text text-white text-xs md:text-sm font-medium">{apeBalance} APE</span>
+          <span className="pixel-text text-white text-xs md:text-sm font-medium">
+            {showData ? `${apeBalance} APE` : '-'}
+          </span>
         </div>
         <div className="flex justify-between items-center py-1 border-b border-white/20">
           <span className="pixel-text text-white/80 text-xs md:text-sm">BIT BALANCE</span>
-          <span className="pixel-text text-white text-xs md:text-sm font-medium">{bitBalance} BIT</span>
+          <span className="pixel-text text-white text-xs md:text-sm font-medium">
+            {showData ? `${bitBalance} BIT` : '-'}
+          </span>
         </div>
         <div className="flex justify-between items-center py-1 border-b border-white/20">
           <span className="pixel-text text-white/80 text-xs md:text-sm">SPACES LEFT</span>
-          <span className="pixel-text text-white text-xs md:text-sm font-medium">{displaySpaces} SPACES</span>
+          <span className="pixel-text text-white text-xs md:text-sm font-medium">
+            {showData ? `${displaySpaces} SPACES` : '-'}
+          </span>
         </div>
         <div className="flex justify-between items-center py-1">
           <span className="pixel-text text-white/80 text-xs md:text-sm">GIGAWATTS AVAILABLE</span>
-          <span className="pixel-text text-white text-xs md:text-sm font-medium">{displayGigawatts} GW</span>
+          <span className="pixel-text text-white text-xs md:text-sm font-medium">
+            {showData ? `${displayGigawatts} GW` : '-'}
+          </span>
         </div>
       </div>
     </div>
diff --git a/src/hooks/useResourcesData.ts b/src/hooks/useResourcesData.ts
new file mode 100644
index 00000000..04a8af9c
--- /dev/null
+++ b/src/hooks/useResourcesData.ts
@@ -0,0 +1,125 @@
+'use client';
+
+import { useAccount, useContractRead, useBalance } from 'wagmi';
+import { formatUnits } from 'viem';
+import { APECHAIN_ID, CONTRACT_ADDRESSES, ERC20_ABI, MAIN_CONTRACT_ABI } from '../config/contracts';
+import { useEffect, useState } from 'react';
+
+export interface ResourcesData {
+  apeBalance: string;
+  bitBalance: string;
+  spacesLeft: number;
+  gigawattsAvailable: number;
+  isLoading: boolean;
+  hasFacility: boolean;
+}
+
+export function useResourcesData(): ResourcesData {
+  const { address, isConnected } = useAccount();
+  const [spacesLeft, setSpacesLeft] = useState<number>(0);
+  const [gigawattsAvailable, setGigawattsAvailable] = useState<number>(0);
+  const [hasFacility, setHasFacility] = useState<boolean>(false);
+  const [isLoading, setIsLoading] = useState<boolean>(true);
+
+  // Get native APE balance
+  const { data: apeBalanceData, isLoading: isApeLoading } = useBalance({
+    address: address as `0x${string}`,
+    chainId: APECHAIN_ID,
+    query: {
+      enabled: !!address,
+    },
+  });
+
+  // Get BIT token balance
+  const { data: bitBalanceData, isLoading: isBitLoading } = useContractRead({
+    address: CONTRACT_ADDRESSES.BIT_TOKEN,
+    abi: ERC20_ABI,
+    functionName: 'balanceOf',
+    args: [address as `0x${string}`],
+    query: {
+      enabled: !!address,
+    },
+  });
+
+  // Check if facility exists
+  const { data: hasInitializedFacility, isLoading: isInitLoading } = useContractRead({
+    address: CONTRACT_ADDRESSES.MAIN,
+    abi: MAIN_CONTRACT_ABI,
+    functionName: 'initializedStarterFacility',
+    args: [address as `0x${string}`],
+    query: {
+      enabled: !!address,
+    },
+  });
+
+  // Get facility data
+  const { data: facilityData, isLoading: isFacilityLoading } = useContractRead({
+    address: CONTRACT_ADDRESSES.MAIN,
+    abi: MAIN_CONTRACT_ABI,
+    functionName: 'getPlayerFacility',
+    args: [address as `0x${string}`],
+    query: {
+      enabled: !!address && !!hasInitializedFacility,
+    },
+  });
+
+  // Get user miners count
+  const { data: userMinersData, isLoading: isMinersLoading } = useContractRead({
+    address: CONTRACT_ADDRESSES.MAIN,
+    abi: MAIN_CONTRACT_ABI,
+    functionName: 'getUserMiners',
+    args: [address as `0x${string}`],
+    query: {
+      enabled: !!address && !!hasInitializedFacility,
+    },
+  });
+
+  useEffect(() => {
+    if (hasInitializedFacility !== undefined) {
+      setHasFacility(!!hasInitializedFacility);
+    }
+  }, [hasInitializedFacility]);
+
+  useEffect(() => {
+    // Update loading state
+    setIsLoading(
+      isApeLoading || 
+      isBitLoading || 
+      isInitLoading || 
+      (hasFacility && (isFacilityLoading || isMinersLoading))
+    );
+
+    // Process facility data
+    if (facilityData && userMinersData && hasFacility) {
+      try {
+        const [power, level, miners, capacity, used, resources, spaces] = facilityData as unknown as bigint[];
+        const [minerIds] = userMinersData as [bigint[], bigint[], bigint[]];
+        
+        const totalMiners = minerIds ? minerIds.length : 0;
+        const maxSpaces = Number(spaces);
+        const totalPower = Number(power);
+        const usedPower = Number(used);
+        
+        // Set spaces left
+        setSpacesLeft(maxSpaces - totalMiners);
+        
+        // Set gigawatts available
+        setGigawattsAvailable(totalPower - usedPower);
+      } catch (error) {
+        console.error('Error processing facility data:', error);
+      }
+    } else if (!hasFacility) {
+      setSpacesLeft(0);
+      setGigawattsAvailable(0);
+    }
+  }, [facilityData, userMinersData, hasFacility, isApeLoading, isBitLoading, isInitLoading, isFacilityLoading, isMinersLoading]);
+
+  return {
+    apeBalance: apeBalanceData?.formatted ?? '0',
+    bitBalance: bitBalanceData ? formatUnits(bitBalanceData as bigint, 18) : '0',
+    spacesLeft,
+    gigawattsAvailable,
+    isLoading,
+    hasFacility
+  };
+} 
\ No newline at end of file
-- 
2.45.1

